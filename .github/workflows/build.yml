name: build with docker upload

on:
  push:
    branches: [ main, deploy ]

jobs:

  #  web-build:
  #    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}
  #    runs-on: ubuntu-latest
  #    defaults:
  #      run:
  #        working-directory: ./frontend
  #
  #    steps:
  #      - name: checkout depoly branch
  #        uses: actions/checkout@v4
  #
  #      - name: get npm cache directory
  #        id: npm-cache-dir
  #        run: |
  #          echo "::set-output name=dir::$(npm config get cache)"
  #
  #      - uses: actions/cache@v3
  #        id: npm-cache
  #        with:
  #          path: ${{ steps.npm-cache-dir.outputs.dir }}
  #          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
  #          restore-keys: |
  #            ${{ runner.os }}-node-
  #
  #      - name: Install Dependencies
  #        run: npm install
  #
  #      - name: Build
  #        run: npm run build
  #
  #      - name: pipeline upload 'frontend build resource'
  #        uses: actions/upload-artifact@v1
  #        with:
  #          name: frontend
  #          path: ./frontend/build
  #
  #  web-deploy:
  #    needs: web-build
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: pipeline download 'frontend build resource'
  #        uses: actions/download-artifact@v1
  #        with:
  #          name: frontend
  #
  #      - name: aws CLI credential Registration
  #        uses: aws-actions/configure-aws-credentials@v4
  #        with:
  #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          aws-region: ap-northeast-2
  #
  #      - name: s3 upload
  #        run: aws s3 sync ./frontend s3://${{ secrets.AWS_S3_BUCKET_NAME }}
  #        env:
  #          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #
  #      - name: CloudFront Invalidation
  #        env:
  #          CLOUD_FRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID}}
  #        run: |
  #          aws cloudfront create-invalidation \
  #            --distribution-id $CLOUD_FRONT_ID --paths /*

  server-build:
    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}
    runs-on: ubuntu-latest

    steps:
      - name: greeting
        run: echo Run CI

      - name: checkout depoly branch
        uses: actions/checkout@v4

      - name: setup JAVA 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: grant executive permission to Gradlew
        run: chmod +x gradlew

      - name: build jar
        run: ./gradlew clean build --exclude-task test

      - name: pipeline upload jar
        uses: actions/upload-artifact@v1
        with:
          name: backend
          path: ./build/libs

      - name: pipeline upload dockerfile
        uses: actions/upload-artifact@v1
        with:
          name: dockerfile
          path: ./share/ci/Dockerfile

  dockerizing:
    needs: server-build
    runs-on: ubuntu-latest
    steps:

      - name: pipeline download jar
        uses: actions/download-artifact@v1
        with:
          name: backend

      - name: pipeline download dockerfile
        uses: actions/download-artifact@v1
        with:
          name: dockerfile

      #      - name: echo build/libs dir
      #        run: ls -al ./backend/libs
      #
      #      - name: move dockerfile
      #        run: mv dockerfile/Dockerfile .

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPOSITORY }} .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ID }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker Image From DockerHub
        run: docker push ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPOSITORY }}

  deploy:
    needs: dockerizing
    runs-on: ubuntu-latest
    steps:
      - name: deploy start
        run: echo deploy start
      - name: deploy server access
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            sudo ./workspace/start.sh